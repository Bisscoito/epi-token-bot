const hre = require("hardhat");
const fs = require("fs");
const path = require("path");

async function main() {
  // 1. Configura√ß√£o inicial
  console.log("üöÄ Iniciando deploy do LiquidityPool...");
  
  // 2. Carrega vari√°veis de ambiente
  require("dotenv").config();
  const tokenAddress = process.env.TOKEN_ADDRESS;
  
  if (!tokenAddress) {
    throw new Error("‚ùå TOKEN_ADDRESS n√£o definido no .env");
  }

  // 3. Obt√©m o contrato
  const LiquidityPool = await hre.ethers.getContractFactory("LiquidityPool");
  
  // 4. Faz o deploy
  console.log("üì° Conectando √† blockchain...");
  const pool = await LiquidityPool.deploy(tokenAddress);
  console.log("‚è≥ Aguardando confirma√ß√£o...");
  await pool.deployed();
  
  // 5. Salva o endere√ßo
  const envPath = path.join(__dirname, "..", ".env");
  const envContent = fs.existsSync(envPath) ? fs.readFileSync(envPath, "utf8") : "";
  
  // Atualiza apenas as vari√°veis necess√°rias
  const updatedEnv = envContent
    .replace(/CONTRACT_ADDRESS=.*\n?/, "")
    .replace(/TOKEN_ADDRESS=.*\n?/, "")
    + `CONTRACT_ADDRESS=${pool.address}\nTOKEN_ADDRESS=${tokenAddress}\n`;
  
  fs.writeFileSync(envPath, updatedEnv.trim());

  console.log("‚úÖ Sucesso! Contrato deployado em:", pool.address);
  console.log("üìù Arquivo .env atualizado:");
  console.log(`CONTRACT_ADDRESS=${pool.address}`);
  console.log(`TOKEN_ADDRESS=${tokenAddress}`);
}

main().catch((error) => {
  console.error("‚ùå Falha no deploy:", error);
  process.exitCode = 1;
});
